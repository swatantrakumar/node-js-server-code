const mongoose = require('mongoose');
const { Schema } = mongoose;
const BaseEntity = require("../baseEntity");
const Reference = require('../reference');
// const GridFields = require('./gridFields');
const APIReference = require('./apiReference');
const FieldProperty = require('./fieldProperty');
const GridColorSettings = require('./gridColorSettings');
const mapOfStringObject = require('./mapOfString');

// Creating user schema
const FormFieldsSchema = mongoose.Schema({ 
    ...BaseEntity.schema.obj,
    availability:[String],
    admin_field:Boolean,
    module:String,
    name:String,
    permission:String,
    data_template:String,
    onchange_data_template:String,
    description:String,
    label:String,
    label_type:String,
    placeholder:String,
    field_name:String,
    type:String,
    custom_form_name:String,
    do_not_refresh_field:Boolean,
    is_disabled:Boolean,
    do_not_refresh_on_add:Boolean,
    disable_if:String,
    mandatory_if:String,
    is_mandatory:Boolean,
    datatype:String,
    ddn_field:String,
    // card_fields:[GridFields],
    api_params:String,
    api_params_criteria:[String],
    call_back_field:String,
    onchange_api:Boolean,
    formValueAsObjectForQtmp:Boolean,
    onchange_api_params:String,
    onchange_call_back_field:String,
    onchange_api_params_criteria:[String],
    treeViewKeys:[String],
    do_not_auto_trigger_on_edit:Boolean,
    tree_view_object:this,
    onchange_function:Boolean,
    onchange_function_param:String,
    onchange_function_param_criteria:[String],
    display_name:String,
    field_class:String,
    show_if:String,
    onclick:APIReference,
    list_of_fields:[this],
    single_select_grid:Boolean,
    // gridColumns:[GridFields],
    disable_on_update:Boolean,
    disable_on_add:Boolean,
    can_update_if:{type:Map},
    can_add_if:{type:Map},
    bulk_download:Boolean,
    min_length:Number,
    max_length:Number,
    mask:String,
    width:String,
    text_align:String,
    shortcut:String,
    hide_in_inline_grid:Boolean,
    grid_header_button:Boolean,
    matching_fields_for_grid_selection:[String],
    grid_selection_button_label:String,
    grid_modal_filter_required:Boolean,
    form:Reference,
    grid:Reference,
    add_new_enabled:Boolean,
    add_new_form:Reference,
    add_new_target_field:String,
    addNewButtonIf:String,
    draggable:Boolean,
    find_child_form:Boolean,
    publicFile:{type:Boolean,default:false},
    fields:[
        {
        type : Map,
        of : mapOfStringObject
        }
    ],
    api:String,
    api_call_name:String,
    grid_row_refresh_icon:Boolean,
    grid_row_selection:Boolean,
    multi_select:Boolean,
    primary_key_for_list:Boolean,
    primaryKeyCriteria:[String],
    date_format:String,
    time_format:String,
    background_color:{type:String,default:''},
    color:{type:String,default:''},
    onchange_get_next_form:Boolean,
    moveFieldsToNewForm:[String],
    calSourceTarget:[{type:Map}],
    maxFileSize:Number,
    dataFilterCriteria:[String],
    add_list_field:String,
    compareFieldName:String,
    disableRowIf:String,
    property:FieldProperty,
    addNewButtonProperty:FieldProperty,
    selectButtonProperty:FieldProperty,
    reviewButtonProperty:FieldProperty,
    listOfPopulatedFields:[String],
    allowDuplicacy:Boolean,
    calculate_on_field:String,
    resetFormAfterQtmp:Boolean,
    onClickLoadData:Boolean,
    onClickApiParams:String,
    onClickCallBackField:String,
    onClickApiParamsCriteria:[String],
    defaultValue:String,
    disableRowIfOnlySelection:Boolean,
    hideOnMobile:Boolean,
    deleteOnMobile:Boolean,
    checkDisableRowIf:Boolean,
    fieldSizeHalfOnApp:Boolean,
    scroll:Boolean,
    extraInfo:{type:Map},
    leftToRightSwipeApp:Boolean,
    showOnlyLabelOnApp:Boolean,
    actionBgColorApp:String,
    ionicIconApp:String,
    hideDeleteInList:Boolean,
    itemListHover:Boolean,
    printInPreview:Boolean,
    openNewTab:Boolean,
    colorCriteria:[GridColorSettings],
    iconName:String
});

// Combine the base entity schema with the user schema
// const FormFields =  mongoose.model('FormFields', FormFieldsSchema,'el_grid_fields');

// Extend the User model with methods from the base entity
// User.prototype = Object.assign(User.prototype, BaseEntity);

module.exports = FormFieldsSchema;